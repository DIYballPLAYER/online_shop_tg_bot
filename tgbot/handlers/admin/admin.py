from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery, ContentType, InlineKeyboardMarkup

from tgbot.commands.admin import AdminCommands
from tgbot.config import MEDIA_DIR
from tgbot.keyboards.reply import ADMIN_KEYBOARD
from tgbot.misc.states import CreateCategoryState, CreateProductState, DeleteCategory, DeleteProduct
from tgbot.models.models import Category, Products


async def admin_start(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω!\n–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
                        reply_markup=ADMIN_KEYBOARD)


async def add_product_category(message: Message):
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ–∏—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å')
    await CreateCategoryState.name.set()


async def add_category(message: Message, state: FSMContext):
    await state.finish()
    check_category: Category = await Category.query.where(
        Category.name == message.text
    ).gino.first()
    if check_category:
        await message.answer('–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        return
    check_category: Category = await Category.create(name=f"{message.text}")
    await message.answer('–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª')


async def category_list(message: Message):
    cat_list: Category = await Category.query.gino.all()
    if not category_list:
        await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç')
        return
    await message.answer("\n\n".join(map(
        lambda cat: f"üÜî: {cat.Id}\nü•´: {cat.name}\n",
        cat_list
    )))


async def create_product(message: Message):
    await CreateProductState.name.set()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å')


async def create_product_name(message: Message, state: FSMContext):
    product = await Products.query.where(
        Products.name == message.text
    ).gino.first()
    if product:
        await message.answer('–ü—Ä–æ–¥—É–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        return
    await state.update_data(name=message.text)
    keyboard = InlineKeyboardMarkup()
    cat_list = await Category.query.gino.all()
    if not cat_list:
        await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç')
        return
    for cat in cat_list:
        keyboard.add(InlineKeyboardButton(cat.name, callback_data=cat.Id))
    await CreateProductState.category.set()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)


async def create_product_category(callback: CallbackQuery, state=CreateProductState.category):
    await state.update_data(category=int(callback.data))
    await callback.bot.delete_message(
        callback.from_user.id,
        callback.message.message_id
    )
    await CreateProductState.price.set()
    await callback.bot.send_message(
        callback.from_user.id,
        "–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç!"
    )


async def create_product_price(message: Message, state: FSMContext):
    await state.update_data(price=int(message.text))
    await message.answer('–•–æ—Ä–æ—à–æ, –∞ —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞')
    await CreateProductState.description.set()


async def create_product_description(message: Message, state=FSMContext):
    await state.update_data(description=message.text)
    await CreateProductState.photo_url.set()
    await message.answer('–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞')


async def create_product_photo(message: Message, state: FSMContext, content_types=ContentType.PHOTO):
    photo = await message.photo[0].download(destination_dir=MEDIA_DIR)
    await state.update_data(photo_url=photo.name)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω!!!')
    async with state.proxy() as data:
        products_data = data.as_dict()
    await Products.create(
        **products_data
    )
    await state.finish()


async def delete_product(message: Message):
    keyboard = InlineKeyboardMarkup()
    products_list = await Products.query.gino.all()
    if not products_list:
        await message.answer('–ü—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç...')
        return
    for product in products_list:
        keyboard.add(InlineKeyboardButton(product.name, callback_data=product.Id))
    await DeleteProduct.callback_query.set()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å...', reply_markup=keyboard)


async def product_list(message: Message):
    products_list: Products = await Products.query.gino.all()
    if not products_list:
        await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç')
        return
    await message.answer("\n\n".join(map(
        lambda product: f"üÜî: {product.Id}\nü•´: {product.name}\n",
        products_list
    )))


async def delete_product_callback_query(callback: CallbackQuery, state=FSMContext):
    product: Products = await Products.query.where(
        Products.Id == int(callback.data)
    ).gino.first()
    await product.delete()
    await callback.bot.send_message(
        callback.from_user.id,
        "–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª!"
    )
    await callback.bot.delete_message(
        callback.from_user.id,
        callback.message.message_id)
    await state.finish()


async def delete_category(message: Message):
    keyboard = InlineKeyboardMarkup()
    cat_list = await Category.query.gino.all()
    if not category_list:
        await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç')
        return
    for cat in cat_list:
        keyboard.add(InlineKeyboardButton(cat.name, callback_data=cat.Id))
    await DeleteCategory.callback_query.set()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:', reply_markup=keyboard)


async def delete_category_callback_query(callback: CallbackQuery, state: FSMContext):
    category: Category = await Category.query.where(
        Category.Id == int(callback.data)
    ).gino.first()
    await category.delete()
    await callback.bot.send_message(
        callback.from_user.id,
        "–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª!"
    )
    await callback.bot.delete_message(
        callback.from_user.id,
        callback.message.message_id)
    await state.finish()


def register_admin(dp: Dispatcher):
    dp.register_message_handler(admin_start, commands=["start"], state="*", is_admin=True)
    dp.register_message_handler(
        add_product_category, text=AdminCommands.add_cat.value
    )
    dp.register_message_handler(
        add_category, state=CreateCategoryState.name
    )
    dp.register_message_handler(
        category_list, text=AdminCommands.cat_list.value
    )
    dp.register_message_handler(
        product_list, text=AdminCommands.product_list.value
    )
    dp.register_message_handler(
        create_product, text=AdminCommands.add_product.value
    )
    dp.register_message_handler(
        create_product_name, state=CreateProductState.name
    )
    dp.register_callback_query_handler(
        create_product_category, state=CreateProductState.category
    )
    dp.register_message_handler(
        create_product_price, state=CreateProductState.price
    )
    dp.register_message_handler(
        create_product_description, state=CreateProductState.description
    )
    dp.register_message_handler(
        create_product_photo, state=CreateProductState.photo_url, content_types=ContentType.PHOTO
    )
    dp.register_message_handler(
        delete_category, text=AdminCommands.delete_cat.value
    )
    dp.register_callback_query_handler(
        delete_category_callback_query, state=DeleteCategory.callback_query
    )
    dp.register_message_handler(
        delete_product, text=AdminCommands.delete_product.value
    )
    dp.register_callback_query_handler(
        delete_product_callback_query, state=DeleteProduct.callback_query
    )
